@{
    ViewData["Title"] = "Weather Forecast";
}
<h1>@ViewData["Title"]</h1>

<div id="loading">Loading weather forecast...</div>
<div id="error" style="display: none; color: red;"></div>
<div id="weather-container" style="display: none;">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temperature (°C)</th>
                <th>Temperature (°F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody id="weather-data">
        </tbody>
    </table>
</div>

<script>
async function fetchWeatherForecast() {
    const loadingElement = document.getElementById('loading');
    const errorElement = document.getElementById('error');
    const containerElement = document.getElementById('weather-container');
    const dataElement = document.getElementById('weather-data');
    
    try {
        // Show loading state
        loadingElement.style.display = 'block';
        errorElement.style.display = 'none';
        containerElement.style.display = 'none';
        
        // Fetch weather data from API
        const response = await fetch('http://localhost:5000/weatherforecast');
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const weatherData = await response.json();
        
        // Clear existing data
        dataElement.innerHTML = '';
        
        // Populate table with weather data
        weatherData.forEach(item => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${new Date(item.date).toLocaleDateString()}</td>
                <td>${item.temperatureC}</td>
                <td>${item.temperatureF}</td>
                <td>${item.summary}</td>
            `;
            dataElement.appendChild(row);
        });
        
        // Hide loading and show data
        loadingElement.style.display = 'none';
        containerElement.style.display = 'block';
        
    } catch (error) {
        console.error('Error fetching weather forecast:', error);
        
        // Show error message
        loadingElement.style.display = 'none';
        errorElement.textContent = `Failed to load weather forecast: ${error.message}`;
        errorElement.style.display = 'block';
    }
}

// Fetch weather data when page loads
document.addEventListener('DOMContentLoaded', fetchWeatherForecast);
</script>
